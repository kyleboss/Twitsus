$(document).ready(function() {

  window.onbeforeunload         = function() { kill_clients() };
  var is_past_refactory_period  = true
  var map                       = ""
  var faye                      = new Faye.Client('http://fayebulous.herokuapp.com/faye');
  var infoWindow                = new google.maps.InfoWindow({maxWidth: 200, disableAutoPan: true});
  var addressField              = document.getElementById('search_address');
  var geocoder                  = new google.maps.Geocoder();
  var heat_map_data             = {}
  var heatmaps                  = {}
  var all_markers               = {}
  var all_languages             = []
  var show_markers              = true
  var currentMarkerLanguage     = ""

  function initialize_map() {
    var mapOptions  = { zoom: 9, mapTypeId:  google.maps.MapTypeId.HYBRID };
    map             = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    google.maps.event.addListener(map,"idle",function() { change_bounds() });
    set_center();
    initialize_search_bar()
  }

  function initialize_search_bar() {
    document.getElementById("search_address").addEventListener("keydown", function(e) {
      if (submit_button_pressed(e)) { search(); }
    }, false);
  }

  function initialize_pubsub() {
    faye.subscribe("/faye/" + currentSession, function(response) {
      console.log(response)
      var tweet       = response.tweet
      tweet.language  = tweet.language.name
      var marker      = new_marker(tweet)
      update_info_window(marker, tweet.language)
      google.maps.event.addListener(marker, 'click', function () { marker = marker_clicked(this) });
      update_heat_and_markers(tweet.language, tweet.lat, tweet.lng, marker)
    });
  }

  function initialize_inputs() {
    $( "#marker_select" ).selectmenu( {
      change: function( event, data ) {
        value = data.item.value
        can_show_tweets = $('#tweet').prop('checked')
        can_show_heat   = $('#heat').prop('checked')
        switch(value) {
          case "all":
            show_markers = true;
            currentMarkerLanguage = ""
            if (can_show_tweets) toggle_all_markers(true);
            if (can_show_heat) toggle_heat_map(true)
            break;
          case "none":
            show_markers = false;
            currentMarkerLanguage = ""
            if (can_show_tweets) toggle_all_markers(false);
            if (can_show_heat) toggle_heat_map(false)
            break;
          default:
            show_markers = false
            currentMarkerLanguage = value
            if (can_show_tweets) toggle_all_markers(false, value)
            if (can_show_heat) toggle_heat_map(false, value)
        }
      }
    });
    $( "#heat_tweet_buttons" ).buttonset();
    $('#tweet').change(function () {
      if ($('#tweet').prop('checked')) {
        value = $( "#marker_select" ).val()
        switch(value) {
          case "all":
            show_markers = true;
            currentMarkerLanguage = ""
            toggle_all_markers(true);
            break;
          case "none":
            show_markers = false;
            currentMarkerLanguage = ""
            toggle_all_markers(false);
            break;
          default:
            show_markers = false
            currentMarkerLanguage = value
            toggle_all_markers(false, value)
        }
      } else {
        toggle_all_markers(false)
      }
    });
    $('#heat').change(function() {
      if ($('#heat').prop('checked')) {
        value = $( "#marker_select" ).val()
        switch(value) {
          case "all":
            toggle_heat_map(true)
            break;
          case "none":
            toggle_heat_map(false)
            break;
          default:
            toggle_heat_map(false, value)
        }
      } else {
        toggle_heat_map(false)
      }
    });
  }

  function update_heat_and_markers(lang, lat, lng, marker) {
    if (!heat_map_data[lang]) {
      set_new_language(lang)
    }
    all_markers[lang].push(marker)
    new_data_point = new google.maps.LatLng(lat, lng)
    heat_map_data[lang].push(new_data_point)
  }

  function toggle_all_markers(make_visible, except_language) {
    for (var lang in all_markers) {
      if (lang != except_language) {
        for (i = 0; i < all_markers[lang].length; i++) {
          curr_marker = all_markers[lang][i]
          curr_marker.setVisible(make_visible);
          curr_marker.statusWindow.close()
        }
      } else {
        for (i = 0; i < all_markers[lang].length; i++) {
          all_markers[lang][i].setVisible(!make_visible);
        }
      }
    }
    infoWindow.close()
  }

  function set_new_language(lang) {
    all_languages.push(lang)
    all_languages.sort()
    heat_map_data[lang] = new google.maps.MVCArray([])
    heatmaps[lang]      = new google.maps.visualization.HeatmapLayer({data: heat_map_data[lang], radius: 8});
    all_markers[lang]   = []
    appendToSelectMenu()
  }

  function appendToSelectMenu() {
    var currently_selected_val = $('#marker_select').val()
    $('#marker_select').find('option').remove().end().append(new Option("All", "all"))
    for (var i = 0; i < all_languages.length; i++) {
      current_language = all_languages[i]
      casedLanguage = toTitleCase(current_language)
      $("#marker_select").append(new Option(casedLanguage, current_language));
    }
    $("#marker_select").append(new Option("None", "none"));
    $('[value=' + currently_selected_val + ']').attr("selected", "selected")
    $("#marker_select").selectmenu("refresh")
  }

  function toTitleCase(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  }

  function toggle_heat_map(make_visible, except_language) {
    for (var lang in heatmaps) {
      if (lang != except_language) {
        set_map_to = make_visible ? map : null
      } else {
        set_map_to = make_visible ? null : map
      }
      console.log(set_map_to)
      console.log(heatmaps[lang].getMap())
      if (set_map_to != heatmaps[lang].getMap() || !set_map_to ) {
        heatmaps[lang].setMap(set_map_to)
      }
    }
  }

  function set_center() {
    if(geolocation_supported) {
      browserSupportFlag = true;
      navigator.geolocation.getCurrentPosition(function(position) {
        initialLocation = new google.maps.LatLng( position.coords.latitude,
                                                  position.coords.longitude);
        map.setCenter(initialLocation);
      }, function() { handleNoGeolocation(browserSupportFlag) });
    } else {
      browserSupportFlag = false;
      handleNoGeolocation(browserSupportFlag);
    }
  }

  function valid_zoom() {
    return map.getZoom() >= 9;
  }

  function geolocation_supported() {
    return navigator.geolocation
  }

  function handleNoGeolocation(errorFlag) {
    san_francisco = new google.maps.LatLng(37.7833, -122.4167)
    map.setCenter(san_francisco);
  }

  function new_marker(tweet) {
    var language          = tweet.language
    var bubble_content    = "<b>" + language + "</b><p>" + tweet.text + "</p>"
    var marker_icon       = determine_flag(language)
    var new_position      = new google.maps.LatLng(tweet.lat, tweet.lng)
    var new_status_window = new google.maps.InfoWindow({ maxWidth: 200, disableAutoPan: true });
    var marker_visibility = is_marker_visible(language)
    new_status_window.setContent(bubble_content)
    return new google.maps.Marker({ position:     new_position,
                                    map:          map,
                                    animation:    google.maps.Animation.DROP,
                                    title:        language,
                                    content:      bubble_content,
                                    icon:         marker_icon,
                                    statusWindow: new_status_window,
                                    visible:   marker_visibility});
  }

  function is_marker_visible(language) {
    return !!($('#tweet').prop('checked') && (show_markers || language == currentMarkerLanguage))
  }

  function update_info_window(marker, language) {
    if (is_marker_visible(language)) {
      infoWindow.currMarker = marker
      infoWindow.setContent(marker.content)
      infoWindow.open(map, marker);
    }
  }

  function determine_flag(language) {
      switch (language) {
      // case "ENGLISH":
      //   return '/assets/english_marker.png'
      // case "SPANISH":
      //   return '/assets/spanish_marker.png'
      // case "PORTUGUSE":
      //   return '/assets/portuguese_marker.png'
      default:
        return'/assets/english_marker.png'
    }
  }

  function marker_clicked(marker) {
    if (infoWindow.currMarker === marker) {
      infoWindow.close(map, marker)
      infoWindow.currMarker = ""
      close_marker(marker)
    } else if (!marker.is_open) {
      open_marker(marker)
    } else {
      close_marker(marker)
    }
  }

  function close_marker(marker) {
      marker.statusWindow.close(map, this)
      marker.is_open = false;
  }

  function open_marker(marker) {
      marker.statusWindow.open(map, marker);
      marker.is_open = true;
  }

  function kill_clients() {
    $.ajax({  async:  false,
              url:    "/homepage/kill_clients",
              type:   "post" });
  }

  function change_bounds() {
    if (is_past_refactory_period && map) {
      var is_valid_zoom   = valid_zoom()
      var bounds          = get_bounds();
      $.post("/homepage/change_bounds", {sw_lng:          bounds["sw_lng"], 
                                        sw_lat:           bounds["sw_lat"], 
                                        ne_lng:           bounds["ne_lng"], 
                                        ne_lat:           bounds["ne_lat"],
                                        currentSession:   currentSession,
                                        is_valid_zoom:    is_valid_zoom});
      is_past_refactory_period = false
      setTimeout(function() { is_past_refactory_period = true; }, 1000);
    }
  }

  function get_bounds() {
    var map_bounds  = map.getBounds()
    var sw_coords   = map_bounds.getSouthWest()
    var ne_coords   = map_bounds.getNorthEast()
    return {sw_lng: sw_coords.lng(), 
            sw_lat: sw_coords.lat(), 
            ne_lng: ne_coords.lng(), 
            ne_lat: ne_coords.lat()};
  }

  function search() {
    bounds          = get_bounds();
    sw_coords       = new google.maps.LatLng(bounds["sw_lat"], bounds["sw_lng"])
    ne_coords       = new google.maps.LatLng(bounds["ne_lat"], bounds["ne_lng"])
    lat_lng_bounds  = new google.maps.LatLngBounds(sw_coords, ne_coords)
    geocoder.geocode({'address': addressField.value, 'bounds': lat_lng_bounds}, 
                      function(results, status) { redirect_post_search(results, status) });
  }

  function redirect_post_search(results, status) {
    if (is_location_found(status)) { 
      var loc     = results[0].geometry.location;
      var new_loc = new google.maps.LatLng(loc.lat(), loc.lng())
      map.setCenter(new_loc);
    } else {
      alert("Not found: " + status); 
    } 
  }

  function is_location_found(status) {
    return status == google.maps.GeocoderStatus.OK
  }

  function submit_button_pressed(e) {
    return e.keyCode == 13
  }

  initialize_map();
  initialize_pubsub();
  initialize_inputs();
});